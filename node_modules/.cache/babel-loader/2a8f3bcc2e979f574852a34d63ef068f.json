{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wchri\\\\Web\\\\CastoryCases\\\\src\\\\Components\\\\PhoneCanvas.js\";\nimport React from 'react';\nimport LoadingPhone from './LoadingPhone';\nimport \"./styles/PhoneCanvas.css\";\nimport { blobToBase64 } from './../util';\n\nclass PhoneCanvas extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      widgets: [],\n      loaded: false\n    };\n    this.canvas = React.createRef();\n  }\n\n  render() {\n    var _this$props$width, _this$props$height;\n\n    if (this.canvasContext != undefined) this.paint();\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: this.props.style,\n      width: (_this$props$width = this.props.width) !== null && _this$props$width !== void 0 ? _this$props$width : 700,\n      height: (_this$props$height = this.props.height) !== null && _this$props$height !== void 0 ? _this$props$height : 700,\n      className: \"phone-canvas_Container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"canvas\", {\n      ref: this.canvas,\n      className: \"phone-canvas\",\n      style: this.props.style,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 17\n      }\n    }), !this.state.loaded && /*#__PURE__*/React.createElement(LoadingPhone, {\n      className: \"loadingPhone\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 40\n      }\n    }));\n  }\n\n  async componentDidMount() {\n    this.canvasContext = this.canvas.current.getContext('2d');\n    this.canvas.current.width = this.canvas.current.offsetWidth;\n    this.canvas.current.height = this.canvas.current.offsetHeight;\n    this.canvasContext.center = [this.canvas.current.offsetWidth / 2, this.canvas.current.offsetHeight / 2];\n    let img;\n    await fetch(this.props.mask).then(response => response.blob()).then(images => img = images);\n    await blobToBase64(img).then(data => {\n      this.mask = new Image();\n\n      this.mask.onload = () => {\n        this.mask.position = [0, 0]; //[-this.mask.width / 2, -this.mask.height / 2]\n\n        this.paint();\n      };\n\n      this.mask.src = data;\n    });\n    await fetch(this.props.case).then(response => response.blob()).then(images => img = images);\n    await blobToBase64(img).then(data => {\n      this.case = new Image();\n\n      this.case.onload = () => {\n        this.case.position = [0, 0]; //[-this.case.width / 2, -this.case.height / 2]\n\n        this.paint();\n      };\n\n      this.case.src = data;\n    });\n    this.paint();\n    this.setState({\n      loaded: true\n    });\n  }\n\n  paint() {\n    if (this.canvasContext) {\n      this.canvasContext.fillStyle = 'rgb(160, 160, 160)';\n      this.canvasContext.fillRect(0, 0, this.canvas.current.width, this.canvas.current.width);\n      this.canvasContext.moveTo(Math.floor(this.canvas.current.width / 2), Math.floor(this.canvas.current.height / 2));\n      this.mask && this.drawImage(this.mask, this.mask.position);\n      this.case && this.drawImage(this.case, this.mask.position);\n    }\n  }\n\n  drawImage(img, position, size) {\n    if (this.position == null) return this.canvasContext.drawImage(img, this.canvasContext.center[0] - img.width / 2, this.canvasContext.center[1] - img.height / 2);\n\n    if (size != null) {\n      this.canvasContext.drawImage(img, this.canvasContext.center[0] + position[0] - img.width / 2, this.canvasContext.center[1] + position[1] - img.width / 2);\n    } else {\n      let realsize = {\n        width: img.width * size[0],\n        height: img.height * size[1]\n      };\n      this.canvasContext.drawImage(img, this.canvasContext.center[0] + position[0] - realsize.width / 2, this.canvasContext.center[1] + position[1] - realsize.height / 2, realsize.width, realsize.height);\n    }\n  }\n\n}\n\nexport default PhoneCanvas;","map":{"version":3,"sources":["C:/Users/wchri/Web/CastoryCases/src/Components/PhoneCanvas.js"],"names":["React","LoadingPhone","blobToBase64","PhoneCanvas","Component","constructor","props","state","widgets","loaded","canvas","createRef","render","canvasContext","undefined","paint","style","width","height","componentDidMount","current","getContext","offsetWidth","offsetHeight","center","img","fetch","mask","then","response","blob","images","data","Image","onload","position","src","case","setState","fillStyle","fillRect","moveTo","Math","floor","drawImage","size","realsize"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport LoadingPhone from './LoadingPhone';\r\nimport \"./styles/PhoneCanvas.css\"\r\nimport { blobToBase64 } from './../util';\r\nclass PhoneCanvas extends React.Component{\r\n\r\n    constructor(props)\r\n    {\r\n        super(props)\r\n        this.state = {\r\n            widgets: [],\r\n            loaded: false\r\n        }\r\n        this.canvas = React.createRef();\r\n    }\r\n\r\n    render(){\r\n        if(this.canvasContext != undefined) this.paint();\r\n        return (\r\n            <div style={this.props.style} width={this.props.width ?? 700} height={this.props.height ?? 700} className=\"phone-canvas_Container\">\r\n                <canvas ref={this.canvas} className=\"phone-canvas\" style={this.props.style}>\r\n                </canvas>\r\n                {!this.state.loaded && <LoadingPhone className=\"loadingPhone\"></LoadingPhone>}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    async componentDidMount(){\r\n        this.canvasContext = this.canvas.current.getContext('2d')\r\n        this.canvas.current.width = this.canvas.current.offsetWidth;\r\n        this.canvas.current.height = this.canvas.current.offsetHeight;\r\n\r\n        this.canvasContext.center = [this.canvas.current.offsetWidth / 2, this.canvas.current.offsetHeight / 2]\r\n        let img;\r\n        await fetch(this.props.mask)\r\n        .then(response => response.blob())\r\n        .then(images => img = images)\r\n        await blobToBase64(img).then(data => {\r\n            this.mask = new Image(); \r\n            this.mask.onload = () => {\r\n                this.mask.position = [0,0]//[-this.mask.width / 2, -this.mask.height / 2]\r\n                this.paint();\r\n            }\r\n            this.mask.src = data;\r\n        })\r\n        await fetch(this.props.case)\r\n        .then(response => response.blob())\r\n        .then(images => img = images)\r\n        await blobToBase64(img).then(data => {\r\n            this.case = new Image(); \r\n            this.case.onload = ()=>{\r\n                this.case.position = [0,0]//[-this.case.width / 2, -this.case.height / 2]\r\n                this.paint(); \r\n            }\r\n            this.case.src = data;\r\n        })\r\n        this.paint()\r\n        this.setState({loaded:true})\r\n    }\r\n    \r\n    paint(){\r\n        if(this.canvasContext){\r\n            this.canvasContext.fillStyle = 'rgb(160, 160, 160)';\r\n            this.canvasContext.fillRect(0, 0, this.canvas.current.width, this.canvas.current.width);\r\n            this.canvasContext.moveTo(Math.floor(this.canvas.current.width / 2), Math.floor(this.canvas.current.height / 2))\r\n            this.mask && this.drawImage(this.mask,this.mask.position);\r\n            this.case && this.drawImage(this.case,this.mask.position);\r\n        }\r\n    }\r\n\r\n    drawImage(img, position, size){\r\n        if (this.position == null)\r\n            return this.canvasContext.drawImage(img, this.canvasContext.center[0] - img.width / 2, this.canvasContext.center[1] - img.height / 2);\r\n        \r\n        if(size != null){\r\n            this.canvasContext.drawImage(img, this.canvasContext.center[0] + position[0] - img.width / 2, this.canvasContext.center[1] + position[1] - img.width / 2)\r\n        }else{\r\n            let realsize = {width: img.width * size[0], height: img.height * size[1]}\r\n            this.canvasContext.drawImage(img, \r\n                this.canvasContext.center[0] + position[0] - realsize.width / 2, this.canvasContext.center[1] + position[1] - realsize.height / 2,\r\n                realsize.width, realsize.height)\r\n        }\r\n    }\r\n}\r\n\r\nexport default PhoneCanvas;"]},"metadata":{},"sourceType":"module"}
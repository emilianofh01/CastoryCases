{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wchri\\\\Web\\\\CastoryCases\\\\src\\\\Components\\\\PhoneCanvas.js\";\nimport React from 'react';\nimport LoadingPhone from './LoadingPhone';\nimport \"./styles/PhoneCanvas.css\";\nimport { blobToBase64 } from './../util';\n\nclass PhoneCanvas extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.changeScale = e => {\n      this.setState({\n        scale: [this.state.scale[0] + (e.nativeEvent.deltaY > 0 ? .1 : -.1), this.state.scale[1] + (e.nativeEvent.deltaY > 0 ? .1 : -.1)]\n      });\n      this.paint();\n    };\n\n    this.state = {\n      widgets: [],\n      scale: [1, 1],\n      loaded: false\n    };\n    this.canvas = React.createRef();\n  }\n\n  render() {\n    var _this$props$width, _this$props$height;\n\n    if (this.canvasContext != undefined) this.paint();\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"canvas\",\n      component: this.changeScale,\n      onWheel: this.changeScale,\n      style: this.props.style,\n      width: (_this$props$width = this.props.width) !== null && _this$props$width !== void 0 ? _this$props$width : 700,\n      height: (_this$props$height = this.props.height) !== null && _this$props$height !== void 0 ? _this$props$height : 700,\n      className: \"phone-canvas_Container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"canvas\", {\n      ref: this.canvas,\n      className: \"phone-canvas\",\n      style: this.props.style,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 17\n      }\n    }), !this.state.loaded && /*#__PURE__*/React.createElement(LoadingPhone, {\n      className: \"loadingPhone\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 40\n      }\n    }));\n  }\n\n  async componentDidMount() {\n    this.canvasContext = this.canvas.current.getContext('2d');\n    this.canvas.current.width = this.canvas.current.offsetWidth;\n    this.canvas.current.height = this.canvas.current.offsetHeight;\n    this.canvasContext.center = [this.canvas.current.offsetWidth / 2, this.canvas.current.offsetHeight / 2];\n    let img;\n    await fetch(this.props.mask).then(response => response.blob()).then(images => img = images);\n    await blobToBase64(img).then(data => {\n      this.mask = new Image();\n\n      this.mask.onload = () => {\n        this.mask.position = [0, 0];\n        this.mask.scale = [1, 1];\n        this.paint();\n      };\n\n      this.mask.src = data;\n    });\n    await fetch(this.props.case).then(response => response.blob()).then(images => img = images);\n    await blobToBase64(img).then(data => {\n      this.case = new Image();\n\n      this.case.onload = () => {\n        this.case.position = [0, 0];\n        this.case.scale = [1, 1];\n        this.paint();\n      };\n\n      this.case.src = data;\n    });\n    this.paint();\n    this.setState({\n      loaded: true\n    });\n  }\n\n  paint() {\n    if (this.canvasContext) {\n      this.canvasContext.fillStyle = 'rgb(160, 160, 160)';\n      this.canvasContext.fillRect(0, 0, this.canvas.current.width, this.canvas.current.width);\n      this.canvasContext.moveTo(Math.floor(this.canvas.current.width / 2), Math.floor(this.canvas.current.height / 2));\n      this.mask && this.drawImage(this.mask, this.mask.position, this.multiply2x1(this.mask.scale, this.state.scale));\n      this.case && this.drawImage(this.case, this.case.position, this.multiply2x1(this.case.scale, this.state.scale));\n    }\n  }\n\n  multiply2x1(a, b) {\n    if (!a || !b) return [0, 0];\n    return [a[0] * b[0], a[1] * b[1]];\n  }\n\n  drawImage(img, position, size) {\n    if (!position) return this.canvasContext.drawImage(img, this.canvasContext.center[0] - img.width / 2, this.canvasContext.center[1] - img.height / 2);\n\n    if (!size) {\n      this.canvasContext.drawImage(img, this.canvasContext.center[0] + position[0] - img.width / 2, this.canvasContext.center[1] + position[1] - img.width / 2);\n    } else {\n      let realsize = {\n        width: img.width * size[0],\n        height: img.height * size[1]\n      };\n      this.canvasContext.drawImage(img, this.canvasContext.center[0] + position[0] * size[0] - realsize.width / 2, this.canvasContext.center[1] + position[1] * size[1] - realsize.height / 2, realsize.width, realsize.height);\n    }\n  }\n\n}\n\nexport default PhoneCanvas;","map":{"version":3,"sources":["C:/Users/wchri/Web/CastoryCases/src/Components/PhoneCanvas.js"],"names":["React","LoadingPhone","blobToBase64","PhoneCanvas","Component","constructor","props","changeScale","e","setState","scale","state","nativeEvent","deltaY","paint","widgets","loaded","canvas","createRef","render","canvasContext","undefined","style","width","height","componentDidMount","current","getContext","offsetWidth","offsetHeight","center","img","fetch","mask","then","response","blob","images","data","Image","onload","position","src","case","fillStyle","fillRect","moveTo","Math","floor","drawImage","multiply2x1","a","b","size","realsize"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport LoadingPhone from './LoadingPhone';\r\nimport \"./styles/PhoneCanvas.css\"\r\nimport { blobToBase64 } from './../util';\r\nclass PhoneCanvas extends React.Component{\r\n\r\n    constructor(props)\r\n    {\r\n        super(props)\r\n        this.state = {\r\n            widgets: [],\r\n            scale: [1, 1],\r\n            loaded: false\r\n        }\r\n        this.canvas = React.createRef();\r\n    }\r\n\r\n    changeScale = (e)=>{\r\n        this.setState({scale: [this.state.scale[0] + ((e.nativeEvent.deltaY>0) ? .1 : -.1), this.state.scale[1] + ((e.nativeEvent.deltaY>0) ? .1 : -.1)]})\r\n        this.paint()\r\n    }\r\n\r\n    render(){\r\n        if(this.canvasContext != undefined) this.paint();\r\n        return (\r\n            <div id=\"canvas\" component={this.changeScale} onWheel={this.changeScale} style={this.props.style} width={this.props.width ?? 700} height={this.props.height ?? 700} className=\"phone-canvas_Container\">\r\n                <canvas ref={this.canvas} className=\"phone-canvas\" style={this.props.style}>\r\n                </canvas>\r\n                {!this.state.loaded && <LoadingPhone className=\"loadingPhone\"></LoadingPhone>}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    async componentDidMount(){\r\n        this.canvasContext = this.canvas.current.getContext('2d')\r\n        this.canvas.current.width = this.canvas.current.offsetWidth;\r\n        this.canvas.current.height = this.canvas.current.offsetHeight;\r\n\r\n        this.canvasContext.center = [this.canvas.current.offsetWidth / 2, this.canvas.current.offsetHeight / 2]\r\n        let img;\r\n        await fetch(this.props.mask)\r\n        .then(response => response.blob())\r\n        .then(images => img = images)\r\n        await blobToBase64(img).then(data => {\r\n            this.mask = new Image(); \r\n            this.mask.onload = () => {\r\n                this.mask.position = [0,0]\r\n                this.mask.scale = [1,1]\r\n                this.paint();\r\n            };\r\n            this.mask.src = data;\r\n        })\r\n        await fetch(this.props.case)\r\n        .then(response => response.blob())\r\n        .then(images => img = images)\r\n        await blobToBase64(img).then(data => {\r\n            this.case = new Image(); \r\n            this.case.onload = ()=>{\r\n                this.case.position = [0,0]\r\n                this.case.scale = [1,1]\r\n                this.paint(); \r\n            };\r\n            this.case.src = data;\r\n        });\r\n        this.paint();\r\n        this.setState({loaded:true});\r\n    }\r\n    \r\n    paint(){\r\n        if(this.canvasContext){\r\n            this.canvasContext.fillStyle = 'rgb(160, 160, 160)';\r\n            this.canvasContext.fillRect(0, 0, this.canvas.current.width, this.canvas.current.width);\r\n            this.canvasContext.moveTo(Math.floor(this.canvas.current.width / 2), Math.floor(this.canvas.current.height / 2))\r\n            this.mask && this.drawImage(this.mask,this.mask.position, this.multiply2x1(this.mask.scale, this.state.scale));\r\n            this.case && this.drawImage(this.case,this.case.position, this.multiply2x1(this.case.scale, this.state.scale));\r\n        }\r\n    }\r\n\r\n    multiply2x1(a, b){\r\n        if(!a || !b)\r\n            return[0,0]\r\n        return [a[0] * b[0], a[1] * b[1]]\r\n    }\r\n\r\n    drawImage(img, position, size){\r\n        if (!position)\r\n            return this.canvasContext.drawImage(img, this.canvasContext.center[0] - img.width / 2, this.canvasContext.center[1] - img.height / 2);\r\n        \r\n        if(!size){\r\n            this.canvasContext.drawImage(img, this.canvasContext.center[0] + position[0] - img.width / 2, this.canvasContext.center[1] + position[1] - img.width / 2)\r\n        }else{\r\n            let realsize = {width: img.width * size[0], height: img.height * size[1]}\r\n            this.canvasContext.drawImage(img, \r\n                this.canvasContext.center[0] + position[0]*size[0] - realsize.width / 2, this.canvasContext.center[1] + position[1]*size[1] - realsize.height / 2,\r\n                realsize.width, realsize.height)\r\n        }\r\n    }\r\n}\r\n\r\nexport default PhoneCanvas;"]},"metadata":{},"sourceType":"module"}